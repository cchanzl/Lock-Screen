#include <iostream>
#include <iomanip> 
#include <fstream>
#include <windows.h>
#include <ole2.h>
#include <olectl.h>
#include <vector>
#include <string>

using namespace std;

//function to get screenshot
//https://stackoverflow.com/questions/3291167/how-can-i-take-a-screenshot-in-a-windows-application
void GetScreenShot(void)
{
	int x1, y1, x2, y2, w, h;

	// get screen dimensions
	x1 = 30; //adjusts left side of screen
	y1 = GetSystemMetrics(SM_YVIRTUALSCREEN);
	x2 = 320; // adjusts right side of screen
	y2 = 500; // adjusts top of screen
	w = x2 - x1;
	h = y2 - y1;

	// copy screen to bitmap
	HDC     hScreen = GetDC(NULL);
	HDC     hDC = CreateCompatibleDC(hScreen);
	HBITMAP hBitmap = CreateCompatibleBitmap(hScreen, w, h);
	HGDIOBJ old_obj = SelectObject(hDC, hBitmap);
	BOOL    bRet = BitBlt(hDC, 0, 0, w, h, hScreen, x1, y1, SRCCOPY);

	// save bitmap to clipboard
	OpenClipboard(NULL);
	EmptyClipboard();
	SetClipboardData(CF_BITMAP, hBitmap);
	CloseClipboard();

	// clean up
	SelectObject(hDC, old_obj);
	DeleteDC(hDC);
	ReleaseDC(NULL, hScreen);
	DeleteObject(hBitmap);
}

//setting the boundary
void lockscreen() {

	string wall = "*"; //change wall here
	int leftindent = 5;
	int width = 30;
	int height = 23;
	int clockheight = 11;

	//read in pattern
	string line;
	vector<string> patternin;

	ifstream myfile("hashtest.txt");
	if (!myfile) //Always test the file open.
	{
		std::cout << "Error opening output file" << std::endl;
		system("pause");
	}

	while (getline(myfile, line))
	{
		if (line.size() > 0)
			patternin.push_back(line);
	}

	int patternsize = patternin.size();												//number of rows in pattern or height of pattern
	if (patternsize > height - clockheight) cout << "pattern is too tall" << endl;	//check height
	for (int i = 0; i < patternsize; i += 1) {										//check width
		if(size(patternin[i]) > (width - 4))
		cout << "row " << i << "'s" << "pattern is too wide" << endl;
	}

	//clock
	for (int i = clockheight; i > 0; i -= 1)
		cout << setw(leftindent) << wall << setw(width) << wall << endl;

	//pattern start
	for (int i = 0; i < patternsize; i += 1) {
		int center = (width - size(patternin[i])) * 0.5;
		int leftcenter = center + size(patternin[i]);
		cout << setw(leftindent) << wall << setw(leftcenter) << patternin[i] << setw(center) << wall << endl;
	}

	//remaining wall below pattern
	for (int i = height - clockheight - patternsize; i > 0; i -= 1) {
		cout << setw(leftindent) << wall << setw(width) << wall << endl;
	}

	//add second last floor
	cout << setw(leftindent) << wall;
	vector<string> floor2{ vector<string>(width,wall) };
	for (int i = 0; i < width / 2; i += 1)
		cout << " " << floor2[i];

	//add last floor
	cout << endl;
	cout << setw(leftindent);
	vector<string> floor1 { vector<string>(width,wall) };
	for (int i = 0; i < width/2; i += 1)
	cout << " " << floor1[i];

	// add space below floor
	for (int i = 5; i > 0; i -= 1)
		cout << endl << " ";
}

int main() {
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE); //https://stackoverflow.com/questions/4053837/colorizing-text-in-the-console-with-c
	SetConsoleTextAttribute(hConsole, 2); // colorattribute = foreground + background * 16
	lockscreen();
	SetConsoleDisplayMode(GetStdHandle(STD_OUTPUT_HANDLE), CONSOLE_FULLSCREEN_MODE, 0); //full screen window
	GetScreenShot();
	//add function to save to file
}

